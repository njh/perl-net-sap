.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.13
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::SAP 3"
.TH Net::SAP 3 "2004-11-21" "perl v5.8.1" "User Contributed Perl Documentation"
.SH "NAME"
Net::SAP \- Session Announcement Protocol (rfc2974)
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Net::SAP;
.Ve
.PP
.Vb 1
\&  my $sap = Net::SAP->new( 'ipv6-global' );
.Ve
.PP
.Vb 1
\&  my $packet = $sap->receive();
.Ve
.PP
.Vb 1
\&  $sap->close();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Net::SAP allows receiving and sending of \s-1SAP\s0 (\s-1RFC2974\s0) 
multicast packets over IPv4 and IPv6.
.Sh "\s-1METHODS\s0"
.IX Subsection "METHODS"
.ie n .IP "$sap = Net::SAP\->new( $group )" 4
.el .IP "$sap = Net::SAP\->new( \f(CW$group\fR )" 4
.IX Item "$sap = Net::SAP->new( $group )"
The \fInew()\fR method is the constructor for the \f(CW\*(C`Net::SAP\*(C'\fR class.
You must specify the \s-1SAP\s0 multicast group you want to join:
.Sp
.Vb 6
\&        ipv4
\&        ipv6-node
\&        ipv6-link
\&        ipv6-site
\&        ipv6-org
\&        ipv6-global
.Ve
.Sp
Alternatively you may pass the address of the multicast group 
directly. When the \f(CW\*(C`Net::SAP\*(C'\fR object is created, it joins the 
multicast group, ready to start receiving or sending packets.
.ie n .IP "$packet = $sap\fR\->\fIreceive()" 4
.el .IP "$packet = \f(CW$sap\fR\->\fIreceive()\fR" 4
.IX Item "$packet = $sap->receive()"
This method blocks until a valid \s-1SAP\s0 packet has been received.
The packet is parsed, decompressed and returned as a 
\&\f(CW\*(C`Net::SAP::Packet\*(C'\fR object.
.ie n .IP "$sap\->send( $data )" 4
.el .IP "$sap\->send( \f(CW$data\fR )" 4
.IX Item "$sap->send( $data )"
This method sends out \s-1SAP\s0 packet on the multicast group that the
\&\f(CW\*(C`Net::SAP\*(C'\fR object to bound to. The \f(CW$data\fR parameter can either be 
a \f(CW\*(C`Net::SAP::Packet\*(C'\fR object, a \f(CW\*(C`Net::SDP\*(C'\fR object or raw \s-1SDP\s0 data.
.Sp
Passing a \f(CW\*(C`Net::SAP::Packet\*(C'\fR object gives the greatest control 
over what is sent. Otherwise default values will be used.
.Sp
If no origin_address has been set, then it is set to the \s-1IP\s0 address 
of the first network interface.
.Sp
Packets greater than 1024 bytes will not be sent. This method 
returns 0 if packet was sent successfully.
.ie n .IP "$group = $sap\fR\->\fIgroup()" 4
.el .IP "$group = \f(CW$sap\fR\->\fIgroup()\fR" 4
.IX Item "$group = $sap->group()"
Returns the address of the multicast group that the socket is bound to.
.IP "$sap\->\fIclose()\fR" 4
.IX Item "$sap->close()"
Leave the \s-1SAP\s0 multicast group and close the socket.
.SH "TODO"
.IX Header "TODO"
.IP "add method of choosing the multicast interface to use" 4
.IX Item "add method of choosing the multicast interface to use"
.PD 0
.IP "ensure that only public v4 addresses are used as origin" 4
.IX Item "ensure that only public v4 addresses are used as origin"
.IP "Packet decryption and validation" 4
.IX Item "Packet decryption and validation"
.IP "Improve test script ?" 4
.IX Item "Improve test script ?"
.IP "Move some \s-1XS\s0 functions to Net::SAP::Packet ?" 4
.IX Item "Move some XS functions to Net::SAP::Packet ?"
.PD
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Net::SAP::Packet, Net::SDP, \fIperl\fR\|(1)
.PP
<http://www.ietf.org/rfc/rfc2974.txt>
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to
\&\f(CW\*(C`bug\-net\-sap@rt.cpan.org\*(C'\fR, or through the web interface at
<http://rt.cpan.org>.  I will be notified, and then you will automatically
be notified of progress on your bug as I make changes.
.SH "AUTHOR"
.IX Header "AUTHOR"
Nicholas Humfrey, njh@ecs.soton.ac.uk
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2004 University of Southampton
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.005 or,
at your option, any later version of Perl 5 you may have available.
